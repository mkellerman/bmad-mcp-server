name: Pre-release

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - v2-node

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  pre-release:
    name: Create Pre-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint

      - name: Run tests
        env:
          CI: true
        run: npm test

      - name: Build package
        run: npm run build

      - name: Get PR number and short SHA
        id: pr_info
        run: |
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "branch_name=${{ github.head_ref }}" >> $GITHUB_OUTPUT

      - name: Create pre-release tag
        id: create_tag
        run: |
          TAG_NAME="pr-${{ steps.pr_info.outputs.pr_number }}-${{ steps.pr_info.outputs.short_sha }}"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

          # Delete existing tag if it exists (for synchronize events)
          git tag -d $TAG_NAME 2>/dev/null || true
          git push origin :refs/tags/$TAG_NAME 2>/dev/null || true

          # Create new tag
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Delete old pre-releases for this PR
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get all releases for this PR and delete them
          gh release list --limit 100 | \
            grep "^pr-${{ steps.pr_info.outputs.pr_number }}-" | \
            awk '{print $1}' | \
            xargs -I {} gh release delete {} --yes 2>/dev/null || true

      - name: Create GitHub Pre-release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ steps.create_tag.outputs.tag_name }} \
            --title "Pre-release: PR #${{ steps.pr_info.outputs.pr_number }} (${{ steps.pr_info.outputs.branch_name }})" \
            --notes "**Pre-release build for testing**

          This is an automated pre-release for PR #${{ steps.pr_info.outputs.pr_number }}.

          **Branch:** \`${{ steps.pr_info.outputs.branch_name }}\`
          **Commit:** ${{ github.event.pull_request.head.sha }}
          **PR:** ${{ github.event.pull_request.html_url }}

          ## Testing this pre-release

          Update your MCP configuration to use this pre-release:

          \`\`\`json
          {
            \"servers\": {
              \"bmad\": {
                \"command\": \"npx\",
                \"args\": [\"-y\", \"git+https://github.com/${{ github.repository }}#${{ steps.create_tag.outputs.tag_name }}\"]
              }
            }
          }
          \`\`\`

          Or for local testing:
          \`\`\`bash
          git fetch origin refs/tags/${{ steps.create_tag.outputs.tag_name }}
          git checkout ${{ steps.create_tag.outputs.tag_name }}
          npm install
          npm run build
          \`\`\`

          **‚ö†Ô∏è This is a pre-release and will be deleted when the PR is merged or closed.**" \
            --prerelease

      - name: Comment on PR
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ steps.pr_info.outputs.pr_number }};
            const tagName = '${{ steps.create_tag.outputs.tag_name }}';
            const releaseUrl = `https://github.com/${{ github.repository }}/releases/tag/${tagName}`;
            const uniqueMarker = '<!-- bmad-pre-release -->';

            // List comments on the PR
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            // Only match comments created by GitHub Actions and containing our unique marker
            const botComment = comments.data.find(comment =>
              comment.user &&
              comment.user.type === 'Bot' &&
              comment.user.login === 'github-actions[bot]' &&
              comment.body && comment.body.includes(uniqueMarker)
            );

            const commentBody = `${uniqueMarker}
            ## üöÄ Pre-release created

            A pre-release has been created for testing: [${tagName}](${releaseUrl})

            ### Test this PR on another machine:

            **Option 1: Using npx (recommended)**
            Update your MCP configuration:
            \`\`\`json
            {
              \"servers\": {
                \"bmad\": {
                  \"command\": \"npx\",
                  \"args\": [\"-y\", \"git+https://github.com/${{ github.repository }}#${tagName}\"]
                }
              }
            }
            \`\`\`

            **Option 2: Clone and test locally**
            \`\`\`bash
            git clone https://github.com/${{ github.repository }}.git
            cd bmad-mcp-server
            git checkout ${tagName}
            npm install
            npm run build
            \`\`\`

            ---
            *Pre-release will be automatically cleaned up when PR is merged or closed.*`;

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody,
              });
            }
